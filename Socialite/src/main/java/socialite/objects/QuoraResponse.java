package socialite.objects; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Structure representing basic user Quora account information.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-10")
public class QuoraResponse implements org.apache.thrift.TBase<QuoraResponse, QuoraResponse._Fields>, java.io.Serializable, Cloneable, Comparable<QuoraResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("socialite.objects.QuoraResponse");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTIONS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionsCount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ANSWERS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("answersCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField UP_VOTES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("upVotesCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DOWN_VOTES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("downVotesCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField WANTS_ANSWERS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("wantsAnswersCount", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuoraResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuoraResponseTupleSchemeFactory());
  }

  private String id; // required
  private long questionsCount; // optional
  private long answersCount; // optional
  private long upVotesCount; // optional
  private long downVotesCount; // optional
  private long wantsAnswersCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The unique identifier for the quora account.
     */
    ID((short)1, "id"),
    /**
     * Count of number of questions asked by the user.
     */
    QUESTIONS_COUNT((short)2, "questionsCount"),
    /**
     * Count of number of questions answered by the user.
     */
    ANSWERS_COUNT((short)3, "answersCount"),
    /**
     * Count of number of answers up voted by the user.
     */
    UP_VOTES_COUNT((short)4, "upVotesCount"),
    /**
     * Count of number of answers down voted by the user.
     */
    DOWN_VOTES_COUNT((short)5, "downVotesCount"),
    /**
     * Count of number of wants answers requested by the user.
     */
    WANTS_ANSWERS_COUNT((short)6, "wantsAnswersCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // QUESTIONS_COUNT
          return QUESTIONS_COUNT;
        case 3: // ANSWERS_COUNT
          return ANSWERS_COUNT;
        case 4: // UP_VOTES_COUNT
          return UP_VOTES_COUNT;
        case 5: // DOWN_VOTES_COUNT
          return DOWN_VOTES_COUNT;
        case 6: // WANTS_ANSWERS_COUNT
          return WANTS_ANSWERS_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUESTIONSCOUNT_ISSET_ID = 0;
  private static final int __ANSWERSCOUNT_ISSET_ID = 1;
  private static final int __UPVOTESCOUNT_ISSET_ID = 2;
  private static final int __DOWNVOTESCOUNT_ISSET_ID = 3;
  private static final int __WANTSANSWERSCOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUESTIONS_COUNT,_Fields.ANSWERS_COUNT,_Fields.UP_VOTES_COUNT,_Fields.DOWN_VOTES_COUNT,_Fields.WANTS_ANSWERS_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUESTIONS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("questionsCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANSWERS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("answersCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UP_VOTES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("upVotesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOWN_VOTES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("downVotesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WANTS_ANSWERS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("wantsAnswersCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuoraResponse.class, metaDataMap);
  }

  public QuoraResponse() {
  }

  public QuoraResponse(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuoraResponse(QuoraResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.questionsCount = other.questionsCount;
    this.answersCount = other.answersCount;
    this.upVotesCount = other.upVotesCount;
    this.downVotesCount = other.downVotesCount;
    this.wantsAnswersCount = other.wantsAnswersCount;
  }

  public QuoraResponse deepCopy() {
    return new QuoraResponse(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setQuestionsCountIsSet(false);
    this.questionsCount = 0;
    setAnswersCountIsSet(false);
    this.answersCount = 0;
    setUpVotesCountIsSet(false);
    this.upVotesCount = 0;
    setDownVotesCountIsSet(false);
    this.downVotesCount = 0;
    setWantsAnswersCountIsSet(false);
    this.wantsAnswersCount = 0;
  }

  /**
   * The unique identifier for the quora account.
   */
  public String getId() {
    return this.id;
  }

  /**
   * The unique identifier for the quora account.
   */
  public QuoraResponse setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Count of number of questions asked by the user.
   */
  public long getQuestionsCount() {
    return this.questionsCount;
  }

  /**
   * Count of number of questions asked by the user.
   */
  public QuoraResponse setQuestionsCount(long questionsCount) {
    this.questionsCount = questionsCount;
    setQuestionsCountIsSet(true);
    return this;
  }

  public void unsetQuestionsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONSCOUNT_ISSET_ID);
  }

  /** Returns true if field questionsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONSCOUNT_ISSET_ID);
  }

  public void setQuestionsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONSCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of questions answered by the user.
   */
  public long getAnswersCount() {
    return this.answersCount;
  }

  /**
   * Count of number of questions answered by the user.
   */
  public QuoraResponse setAnswersCount(long answersCount) {
    this.answersCount = answersCount;
    setAnswersCountIsSet(true);
    return this;
  }

  public void unsetAnswersCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWERSCOUNT_ISSET_ID);
  }

  /** Returns true if field answersCount is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswersCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWERSCOUNT_ISSET_ID);
  }

  public void setAnswersCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWERSCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of answers up voted by the user.
   */
  public long getUpVotesCount() {
    return this.upVotesCount;
  }

  /**
   * Count of number of answers up voted by the user.
   */
  public QuoraResponse setUpVotesCount(long upVotesCount) {
    this.upVotesCount = upVotesCount;
    setUpVotesCountIsSet(true);
    return this;
  }

  public void unsetUpVotesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPVOTESCOUNT_ISSET_ID);
  }

  /** Returns true if field upVotesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUpVotesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __UPVOTESCOUNT_ISSET_ID);
  }

  public void setUpVotesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPVOTESCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of answers down voted by the user.
   */
  public long getDownVotesCount() {
    return this.downVotesCount;
  }

  /**
   * Count of number of answers down voted by the user.
   */
  public QuoraResponse setDownVotesCount(long downVotesCount) {
    this.downVotesCount = downVotesCount;
    setDownVotesCountIsSet(true);
    return this;
  }

  public void unsetDownVotesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNVOTESCOUNT_ISSET_ID);
  }

  /** Returns true if field downVotesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDownVotesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNVOTESCOUNT_ISSET_ID);
  }

  public void setDownVotesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNVOTESCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of wants answers requested by the user.
   */
  public long getWantsAnswersCount() {
    return this.wantsAnswersCount;
  }

  /**
   * Count of number of wants answers requested by the user.
   */
  public QuoraResponse setWantsAnswersCount(long wantsAnswersCount) {
    this.wantsAnswersCount = wantsAnswersCount;
    setWantsAnswersCountIsSet(true);
    return this;
  }

  public void unsetWantsAnswersCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WANTSANSWERSCOUNT_ISSET_ID);
  }

  /** Returns true if field wantsAnswersCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWantsAnswersCount() {
    return EncodingUtils.testBit(__isset_bitfield, __WANTSANSWERSCOUNT_ISSET_ID);
  }

  public void setWantsAnswersCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WANTSANSWERSCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case QUESTIONS_COUNT:
      if (value == null) {
        unsetQuestionsCount();
      } else {
        setQuestionsCount((Long)value);
      }
      break;

    case ANSWERS_COUNT:
      if (value == null) {
        unsetAnswersCount();
      } else {
        setAnswersCount((Long)value);
      }
      break;

    case UP_VOTES_COUNT:
      if (value == null) {
        unsetUpVotesCount();
      } else {
        setUpVotesCount((Long)value);
      }
      break;

    case DOWN_VOTES_COUNT:
      if (value == null) {
        unsetDownVotesCount();
      } else {
        setDownVotesCount((Long)value);
      }
      break;

    case WANTS_ANSWERS_COUNT:
      if (value == null) {
        unsetWantsAnswersCount();
      } else {
        setWantsAnswersCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case QUESTIONS_COUNT:
      return Long.valueOf(getQuestionsCount());

    case ANSWERS_COUNT:
      return Long.valueOf(getAnswersCount());

    case UP_VOTES_COUNT:
      return Long.valueOf(getUpVotesCount());

    case DOWN_VOTES_COUNT:
      return Long.valueOf(getDownVotesCount());

    case WANTS_ANSWERS_COUNT:
      return Long.valueOf(getWantsAnswersCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case QUESTIONS_COUNT:
      return isSetQuestionsCount();
    case ANSWERS_COUNT:
      return isSetAnswersCount();
    case UP_VOTES_COUNT:
      return isSetUpVotesCount();
    case DOWN_VOTES_COUNT:
      return isSetDownVotesCount();
    case WANTS_ANSWERS_COUNT:
      return isSetWantsAnswersCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuoraResponse)
      return this.equals((QuoraResponse)that);
    return false;
  }

  public boolean equals(QuoraResponse that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_questionsCount = true && this.isSetQuestionsCount();
    boolean that_present_questionsCount = true && that.isSetQuestionsCount();
    if (this_present_questionsCount || that_present_questionsCount) {
      if (!(this_present_questionsCount && that_present_questionsCount))
        return false;
      if (this.questionsCount != that.questionsCount)
        return false;
    }

    boolean this_present_answersCount = true && this.isSetAnswersCount();
    boolean that_present_answersCount = true && that.isSetAnswersCount();
    if (this_present_answersCount || that_present_answersCount) {
      if (!(this_present_answersCount && that_present_answersCount))
        return false;
      if (this.answersCount != that.answersCount)
        return false;
    }

    boolean this_present_upVotesCount = true && this.isSetUpVotesCount();
    boolean that_present_upVotesCount = true && that.isSetUpVotesCount();
    if (this_present_upVotesCount || that_present_upVotesCount) {
      if (!(this_present_upVotesCount && that_present_upVotesCount))
        return false;
      if (this.upVotesCount != that.upVotesCount)
        return false;
    }

    boolean this_present_downVotesCount = true && this.isSetDownVotesCount();
    boolean that_present_downVotesCount = true && that.isSetDownVotesCount();
    if (this_present_downVotesCount || that_present_downVotesCount) {
      if (!(this_present_downVotesCount && that_present_downVotesCount))
        return false;
      if (this.downVotesCount != that.downVotesCount)
        return false;
    }

    boolean this_present_wantsAnswersCount = true && this.isSetWantsAnswersCount();
    boolean that_present_wantsAnswersCount = true && that.isSetWantsAnswersCount();
    if (this_present_wantsAnswersCount || that_present_wantsAnswersCount) {
      if (!(this_present_wantsAnswersCount && that_present_wantsAnswersCount))
        return false;
      if (this.wantsAnswersCount != that.wantsAnswersCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_questionsCount = true && (isSetQuestionsCount());
    list.add(present_questionsCount);
    if (present_questionsCount)
      list.add(questionsCount);

    boolean present_answersCount = true && (isSetAnswersCount());
    list.add(present_answersCount);
    if (present_answersCount)
      list.add(answersCount);

    boolean present_upVotesCount = true && (isSetUpVotesCount());
    list.add(present_upVotesCount);
    if (present_upVotesCount)
      list.add(upVotesCount);

    boolean present_downVotesCount = true && (isSetDownVotesCount());
    list.add(present_downVotesCount);
    if (present_downVotesCount)
      list.add(downVotesCount);

    boolean present_wantsAnswersCount = true && (isSetWantsAnswersCount());
    list.add(present_wantsAnswersCount);
    if (present_wantsAnswersCount)
      list.add(wantsAnswersCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(QuoraResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionsCount()).compareTo(other.isSetQuestionsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionsCount, other.questionsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswersCount()).compareTo(other.isSetAnswersCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswersCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answersCount, other.answersCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpVotesCount()).compareTo(other.isSetUpVotesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpVotesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upVotesCount, other.upVotesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownVotesCount()).compareTo(other.isSetDownVotesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownVotesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downVotesCount, other.downVotesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWantsAnswersCount()).compareTo(other.isSetWantsAnswersCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWantsAnswersCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wantsAnswersCount, other.wantsAnswersCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("socialite.objects.QuoraResponse(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetQuestionsCount()) {
      if (!first) sb.append(", ");
      sb.append("questionsCount:");
      sb.append(this.questionsCount);
      first = false;
    }
    if (isSetAnswersCount()) {
      if (!first) sb.append(", ");
      sb.append("answersCount:");
      sb.append(this.answersCount);
      first = false;
    }
    if (isSetUpVotesCount()) {
      if (!first) sb.append(", ");
      sb.append("upVotesCount:");
      sb.append(this.upVotesCount);
      first = false;
    }
    if (isSetDownVotesCount()) {
      if (!first) sb.append(", ");
      sb.append("downVotesCount:");
      sb.append(this.downVotesCount);
      first = false;
    }
    if (isSetWantsAnswersCount()) {
      if (!first) sb.append(", ");
      sb.append("wantsAnswersCount:");
      sb.append(this.wantsAnswersCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuoraResponseStandardSchemeFactory implements SchemeFactory {
    public QuoraResponseStandardScheme getScheme() {
      return new QuoraResponseStandardScheme();
    }
  }

  private static class QuoraResponseStandardScheme extends StandardScheme<QuoraResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuoraResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUESTIONS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.questionsCount = iprot.readI64();
              struct.setQuestionsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANSWERS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.answersCount = iprot.readI64();
              struct.setAnswersCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UP_VOTES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.upVotesCount = iprot.readI64();
              struct.setUpVotesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOWN_VOTES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.downVotesCount = iprot.readI64();
              struct.setDownVotesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WANTS_ANSWERS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.wantsAnswersCount = iprot.readI64();
              struct.setWantsAnswersCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuoraResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuestionsCount()) {
        oprot.writeFieldBegin(QUESTIONS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.questionsCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAnswersCount()) {
        oprot.writeFieldBegin(ANSWERS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.answersCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpVotesCount()) {
        oprot.writeFieldBegin(UP_VOTES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.upVotesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDownVotesCount()) {
        oprot.writeFieldBegin(DOWN_VOTES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.downVotesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWantsAnswersCount()) {
        oprot.writeFieldBegin(WANTS_ANSWERS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.wantsAnswersCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuoraResponseTupleSchemeFactory implements SchemeFactory {
    public QuoraResponseTupleScheme getScheme() {
      return new QuoraResponseTupleScheme();
    }
  }

  private static class QuoraResponseTupleScheme extends TupleScheme<QuoraResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuoraResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetQuestionsCount()) {
        optionals.set(0);
      }
      if (struct.isSetAnswersCount()) {
        optionals.set(1);
      }
      if (struct.isSetUpVotesCount()) {
        optionals.set(2);
      }
      if (struct.isSetDownVotesCount()) {
        optionals.set(3);
      }
      if (struct.isSetWantsAnswersCount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetQuestionsCount()) {
        oprot.writeI64(struct.questionsCount);
      }
      if (struct.isSetAnswersCount()) {
        oprot.writeI64(struct.answersCount);
      }
      if (struct.isSetUpVotesCount()) {
        oprot.writeI64(struct.upVotesCount);
      }
      if (struct.isSetDownVotesCount()) {
        oprot.writeI64(struct.downVotesCount);
      }
      if (struct.isSetWantsAnswersCount()) {
        oprot.writeI64(struct.wantsAnswersCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuoraResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.questionsCount = iprot.readI64();
        struct.setQuestionsCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.answersCount = iprot.readI64();
        struct.setAnswersCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.upVotesCount = iprot.readI64();
        struct.setUpVotesCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.downVotesCount = iprot.readI64();
        struct.setDownVotesCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wantsAnswersCount = iprot.readI64();
        struct.setWantsAnswersCountIsSet(true);
      }
    }
  }

}

