package socialite.objects; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Structure representing basic user Facebook account information.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-10")
public class FacebookResponse implements org.apache.thrift.TBase<FacebookResponse, FacebookResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FacebookResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("socialite.objects.FacebookResponse");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROFILE_PICTURES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("profilePicturesCount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COVER_PICTURES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("coverPicturesCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LIKES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("likesCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COMMENTS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentsCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SHARES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sharesCount", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FacebookResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FacebookResponseTupleSchemeFactory());
  }

  private String id; // required
  private long profilePicturesCount; // optional
  private long coverPicturesCount; // optional
  private long likesCount; // optional
  private long commentsCount; // optional
  private long sharesCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The unique identifier for the facebook account.
     */
    ID((short)1, "id"),
    /**
     * Count of number of profile pictures of the user.
     */
    PROFILE_PICTURES_COUNT((short)2, "profilePicturesCount"),
    /**
     * Count of number of cover pictures of the user.
     */
    COVER_PICTURES_COUNT((short)3, "coverPicturesCount"),
    /**
     * Count of number of likes made by the user.
     */
    LIKES_COUNT((short)4, "likesCount"),
    /**
     * Count of number of comments made by the user.
     */
    COMMENTS_COUNT((short)5, "commentsCount"),
    /**
     * Count of number of shares made by the user.
     */
    SHARES_COUNT((short)6, "sharesCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PROFILE_PICTURES_COUNT
          return PROFILE_PICTURES_COUNT;
        case 3: // COVER_PICTURES_COUNT
          return COVER_PICTURES_COUNT;
        case 4: // LIKES_COUNT
          return LIKES_COUNT;
        case 5: // COMMENTS_COUNT
          return COMMENTS_COUNT;
        case 6: // SHARES_COUNT
          return SHARES_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROFILEPICTURESCOUNT_ISSET_ID = 0;
  private static final int __COVERPICTURESCOUNT_ISSET_ID = 1;
  private static final int __LIKESCOUNT_ISSET_ID = 2;
  private static final int __COMMENTSCOUNT_ISSET_ID = 3;
  private static final int __SHARESCOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROFILE_PICTURES_COUNT,_Fields.COVER_PICTURES_COUNT,_Fields.LIKES_COUNT,_Fields.COMMENTS_COUNT,_Fields.SHARES_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_PICTURES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("profilePicturesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COVER_PICTURES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("coverPicturesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIKES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("likesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENTS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("commentsCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHARES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sharesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FacebookResponse.class, metaDataMap);
  }

  public FacebookResponse() {
  }

  public FacebookResponse(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacebookResponse(FacebookResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.profilePicturesCount = other.profilePicturesCount;
    this.coverPicturesCount = other.coverPicturesCount;
    this.likesCount = other.likesCount;
    this.commentsCount = other.commentsCount;
    this.sharesCount = other.sharesCount;
  }

  public FacebookResponse deepCopy() {
    return new FacebookResponse(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setProfilePicturesCountIsSet(false);
    this.profilePicturesCount = 0;
    setCoverPicturesCountIsSet(false);
    this.coverPicturesCount = 0;
    setLikesCountIsSet(false);
    this.likesCount = 0;
    setCommentsCountIsSet(false);
    this.commentsCount = 0;
    setSharesCountIsSet(false);
    this.sharesCount = 0;
  }

  /**
   * The unique identifier for the facebook account.
   */
  public String getId() {
    return this.id;
  }

  /**
   * The unique identifier for the facebook account.
   */
  public FacebookResponse setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Count of number of profile pictures of the user.
   */
  public long getProfilePicturesCount() {
    return this.profilePicturesCount;
  }

  /**
   * Count of number of profile pictures of the user.
   */
  public FacebookResponse setProfilePicturesCount(long profilePicturesCount) {
    this.profilePicturesCount = profilePicturesCount;
    setProfilePicturesCountIsSet(true);
    return this;
  }

  public void unsetProfilePicturesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFILEPICTURESCOUNT_ISSET_ID);
  }

  /** Returns true if field profilePicturesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetProfilePicturesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFILEPICTURESCOUNT_ISSET_ID);
  }

  public void setProfilePicturesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFILEPICTURESCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of cover pictures of the user.
   */
  public long getCoverPicturesCount() {
    return this.coverPicturesCount;
  }

  /**
   * Count of number of cover pictures of the user.
   */
  public FacebookResponse setCoverPicturesCount(long coverPicturesCount) {
    this.coverPicturesCount = coverPicturesCount;
    setCoverPicturesCountIsSet(true);
    return this;
  }

  public void unsetCoverPicturesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COVERPICTURESCOUNT_ISSET_ID);
  }

  /** Returns true if field coverPicturesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverPicturesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COVERPICTURESCOUNT_ISSET_ID);
  }

  public void setCoverPicturesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COVERPICTURESCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of likes made by the user.
   */
  public long getLikesCount() {
    return this.likesCount;
  }

  /**
   * Count of number of likes made by the user.
   */
  public FacebookResponse setLikesCount(long likesCount) {
    this.likesCount = likesCount;
    setLikesCountIsSet(true);
    return this;
  }

  public void unsetLikesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKESCOUNT_ISSET_ID);
  }

  /** Returns true if field likesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLikesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKESCOUNT_ISSET_ID);
  }

  public void setLikesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKESCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of comments made by the user.
   */
  public long getCommentsCount() {
    return this.commentsCount;
  }

  /**
   * Count of number of comments made by the user.
   */
  public FacebookResponse setCommentsCount(long commentsCount) {
    this.commentsCount = commentsCount;
    setCommentsCountIsSet(true);
    return this;
  }

  public void unsetCommentsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTSCOUNT_ISSET_ID);
  }

  /** Returns true if field commentsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTSCOUNT_ISSET_ID);
  }

  public void setCommentsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTSCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of shares made by the user.
   */
  public long getSharesCount() {
    return this.sharesCount;
  }

  /**
   * Count of number of shares made by the user.
   */
  public FacebookResponse setSharesCount(long sharesCount) {
    this.sharesCount = sharesCount;
    setSharesCountIsSet(true);
    return this;
  }

  public void unsetSharesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARESCOUNT_ISSET_ID);
  }

  /** Returns true if field sharesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSharesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARESCOUNT_ISSET_ID);
  }

  public void setSharesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARESCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PROFILE_PICTURES_COUNT:
      if (value == null) {
        unsetProfilePicturesCount();
      } else {
        setProfilePicturesCount((Long)value);
      }
      break;

    case COVER_PICTURES_COUNT:
      if (value == null) {
        unsetCoverPicturesCount();
      } else {
        setCoverPicturesCount((Long)value);
      }
      break;

    case LIKES_COUNT:
      if (value == null) {
        unsetLikesCount();
      } else {
        setLikesCount((Long)value);
      }
      break;

    case COMMENTS_COUNT:
      if (value == null) {
        unsetCommentsCount();
      } else {
        setCommentsCount((Long)value);
      }
      break;

    case SHARES_COUNT:
      if (value == null) {
        unsetSharesCount();
      } else {
        setSharesCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PROFILE_PICTURES_COUNT:
      return Long.valueOf(getProfilePicturesCount());

    case COVER_PICTURES_COUNT:
      return Long.valueOf(getCoverPicturesCount());

    case LIKES_COUNT:
      return Long.valueOf(getLikesCount());

    case COMMENTS_COUNT:
      return Long.valueOf(getCommentsCount());

    case SHARES_COUNT:
      return Long.valueOf(getSharesCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PROFILE_PICTURES_COUNT:
      return isSetProfilePicturesCount();
    case COVER_PICTURES_COUNT:
      return isSetCoverPicturesCount();
    case LIKES_COUNT:
      return isSetLikesCount();
    case COMMENTS_COUNT:
      return isSetCommentsCount();
    case SHARES_COUNT:
      return isSetSharesCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FacebookResponse)
      return this.equals((FacebookResponse)that);
    return false;
  }

  public boolean equals(FacebookResponse that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_profilePicturesCount = true && this.isSetProfilePicturesCount();
    boolean that_present_profilePicturesCount = true && that.isSetProfilePicturesCount();
    if (this_present_profilePicturesCount || that_present_profilePicturesCount) {
      if (!(this_present_profilePicturesCount && that_present_profilePicturesCount))
        return false;
      if (this.profilePicturesCount != that.profilePicturesCount)
        return false;
    }

    boolean this_present_coverPicturesCount = true && this.isSetCoverPicturesCount();
    boolean that_present_coverPicturesCount = true && that.isSetCoverPicturesCount();
    if (this_present_coverPicturesCount || that_present_coverPicturesCount) {
      if (!(this_present_coverPicturesCount && that_present_coverPicturesCount))
        return false;
      if (this.coverPicturesCount != that.coverPicturesCount)
        return false;
    }

    boolean this_present_likesCount = true && this.isSetLikesCount();
    boolean that_present_likesCount = true && that.isSetLikesCount();
    if (this_present_likesCount || that_present_likesCount) {
      if (!(this_present_likesCount && that_present_likesCount))
        return false;
      if (this.likesCount != that.likesCount)
        return false;
    }

    boolean this_present_commentsCount = true && this.isSetCommentsCount();
    boolean that_present_commentsCount = true && that.isSetCommentsCount();
    if (this_present_commentsCount || that_present_commentsCount) {
      if (!(this_present_commentsCount && that_present_commentsCount))
        return false;
      if (this.commentsCount != that.commentsCount)
        return false;
    }

    boolean this_present_sharesCount = true && this.isSetSharesCount();
    boolean that_present_sharesCount = true && that.isSetSharesCount();
    if (this_present_sharesCount || that_present_sharesCount) {
      if (!(this_present_sharesCount && that_present_sharesCount))
        return false;
      if (this.sharesCount != that.sharesCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_profilePicturesCount = true && (isSetProfilePicturesCount());
    list.add(present_profilePicturesCount);
    if (present_profilePicturesCount)
      list.add(profilePicturesCount);

    boolean present_coverPicturesCount = true && (isSetCoverPicturesCount());
    list.add(present_coverPicturesCount);
    if (present_coverPicturesCount)
      list.add(coverPicturesCount);

    boolean present_likesCount = true && (isSetLikesCount());
    list.add(present_likesCount);
    if (present_likesCount)
      list.add(likesCount);

    boolean present_commentsCount = true && (isSetCommentsCount());
    list.add(present_commentsCount);
    if (present_commentsCount)
      list.add(commentsCount);

    boolean present_sharesCount = true && (isSetSharesCount());
    list.add(present_sharesCount);
    if (present_sharesCount)
      list.add(sharesCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(FacebookResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfilePicturesCount()).compareTo(other.isSetProfilePicturesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfilePicturesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profilePicturesCount, other.profilePicturesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverPicturesCount()).compareTo(other.isSetCoverPicturesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverPicturesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverPicturesCount, other.coverPicturesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikesCount()).compareTo(other.isSetLikesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likesCount, other.likesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentsCount()).compareTo(other.isSetCommentsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentsCount, other.commentsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSharesCount()).compareTo(other.isSetSharesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharesCount, other.sharesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("socialite.objects.FacebookResponse(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetProfilePicturesCount()) {
      if (!first) sb.append(", ");
      sb.append("profilePicturesCount:");
      sb.append(this.profilePicturesCount);
      first = false;
    }
    if (isSetCoverPicturesCount()) {
      if (!first) sb.append(", ");
      sb.append("coverPicturesCount:");
      sb.append(this.coverPicturesCount);
      first = false;
    }
    if (isSetLikesCount()) {
      if (!first) sb.append(", ");
      sb.append("likesCount:");
      sb.append(this.likesCount);
      first = false;
    }
    if (isSetCommentsCount()) {
      if (!first) sb.append(", ");
      sb.append("commentsCount:");
      sb.append(this.commentsCount);
      first = false;
    }
    if (isSetSharesCount()) {
      if (!first) sb.append(", ");
      sb.append("sharesCount:");
      sb.append(this.sharesCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacebookResponseStandardSchemeFactory implements SchemeFactory {
    public FacebookResponseStandardScheme getScheme() {
      return new FacebookResponseStandardScheme();
    }
  }

  private static class FacebookResponseStandardScheme extends StandardScheme<FacebookResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FacebookResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROFILE_PICTURES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.profilePicturesCount = iprot.readI64();
              struct.setProfilePicturesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COVER_PICTURES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coverPicturesCount = iprot.readI64();
              struct.setCoverPicturesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIKES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.likesCount = iprot.readI64();
              struct.setLikesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMENTS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentsCount = iprot.readI64();
              struct.setCommentsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHARES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sharesCount = iprot.readI64();
              struct.setSharesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FacebookResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProfilePicturesCount()) {
        oprot.writeFieldBegin(PROFILE_PICTURES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.profilePicturesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoverPicturesCount()) {
        oprot.writeFieldBegin(COVER_PICTURES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.coverPicturesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLikesCount()) {
        oprot.writeFieldBegin(LIKES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.likesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommentsCount()) {
        oprot.writeFieldBegin(COMMENTS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.commentsCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSharesCount()) {
        oprot.writeFieldBegin(SHARES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.sharesCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacebookResponseTupleSchemeFactory implements SchemeFactory {
    public FacebookResponseTupleScheme getScheme() {
      return new FacebookResponseTupleScheme();
    }
  }

  private static class FacebookResponseTupleScheme extends TupleScheme<FacebookResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FacebookResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetProfilePicturesCount()) {
        optionals.set(0);
      }
      if (struct.isSetCoverPicturesCount()) {
        optionals.set(1);
      }
      if (struct.isSetLikesCount()) {
        optionals.set(2);
      }
      if (struct.isSetCommentsCount()) {
        optionals.set(3);
      }
      if (struct.isSetSharesCount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetProfilePicturesCount()) {
        oprot.writeI64(struct.profilePicturesCount);
      }
      if (struct.isSetCoverPicturesCount()) {
        oprot.writeI64(struct.coverPicturesCount);
      }
      if (struct.isSetLikesCount()) {
        oprot.writeI64(struct.likesCount);
      }
      if (struct.isSetCommentsCount()) {
        oprot.writeI64(struct.commentsCount);
      }
      if (struct.isSetSharesCount()) {
        oprot.writeI64(struct.sharesCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FacebookResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.profilePicturesCount = iprot.readI64();
        struct.setProfilePicturesCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.coverPicturesCount = iprot.readI64();
        struct.setCoverPicturesCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.likesCount = iprot.readI64();
        struct.setLikesCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commentsCount = iprot.readI64();
        struct.setCommentsCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sharesCount = iprot.readI64();
        struct.setSharesCountIsSet(true);
      }
    }
  }

}

