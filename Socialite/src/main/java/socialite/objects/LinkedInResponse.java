package socialite.objects; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Structure representing basic user LinkedIn account information.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-10")
public class LinkedInResponse implements org.apache.thrift.TBase<LinkedInResponse, LinkedInResponse._Fields>, java.io.Serializable, Cloneable, Comparable<LinkedInResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("socialite.objects.LinkedInResponse");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("currentJob", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PREVIOUS_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("previousTitle", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PREVIOUS_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("previousJob", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SKILLS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("skillsCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CONNECTIONS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionsCount", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LinkedInResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LinkedInResponseTupleSchemeFactory());
  }

  private String id; // required
  private String currentTitle; // optional
  private String currentJob; // optional
  private String previousTitle; // optional
  private String previousJob; // optional
  private long skillsCount; // optional
  private long connectionsCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The unique identifier for the linkedIn account.
     */
    ID((short)1, "id"),
    /**
     * Current job title of the user.
     */
    CURRENT_TITLE((short)2, "currentTitle"),
    /**
     * Current company the user works for.
     */
    CURRENT_JOB((short)3, "currentJob"),
    /**
     * Previous job title of the user.
     */
    PREVIOUS_TITLE((short)4, "previousTitle"),
    /**
     * Previous company the user works for.
     */
    PREVIOUS_JOB((short)5, "previousJob"),
    /**
     * Count of number of skills user has.
     */
    SKILLS_COUNT((short)6, "skillsCount"),
    /**
     * Count of number of connections user has.
     */
    CONNECTIONS_COUNT((short)7, "connectionsCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CURRENT_TITLE
          return CURRENT_TITLE;
        case 3: // CURRENT_JOB
          return CURRENT_JOB;
        case 4: // PREVIOUS_TITLE
          return PREVIOUS_TITLE;
        case 5: // PREVIOUS_JOB
          return PREVIOUS_JOB;
        case 6: // SKILLS_COUNT
          return SKILLS_COUNT;
        case 7: // CONNECTIONS_COUNT
          return CONNECTIONS_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SKILLSCOUNT_ISSET_ID = 0;
  private static final int __CONNECTIONSCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CURRENT_TITLE,_Fields.CURRENT_JOB,_Fields.PREVIOUS_TITLE,_Fields.PREVIOUS_JOB,_Fields.SKILLS_COUNT,_Fields.CONNECTIONS_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_TITLE, new org.apache.thrift.meta_data.FieldMetaData("currentTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_JOB, new org.apache.thrift.meta_data.FieldMetaData("currentJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREVIOUS_TITLE, new org.apache.thrift.meta_data.FieldMetaData("previousTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREVIOUS_JOB, new org.apache.thrift.meta_data.FieldMetaData("previousJob", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKILLS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("skillsCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONNECTIONS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("connectionsCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LinkedInResponse.class, metaDataMap);
  }

  public LinkedInResponse() {
  }

  public LinkedInResponse(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LinkedInResponse(LinkedInResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCurrentTitle()) {
      this.currentTitle = other.currentTitle;
    }
    if (other.isSetCurrentJob()) {
      this.currentJob = other.currentJob;
    }
    if (other.isSetPreviousTitle()) {
      this.previousTitle = other.previousTitle;
    }
    if (other.isSetPreviousJob()) {
      this.previousJob = other.previousJob;
    }
    this.skillsCount = other.skillsCount;
    this.connectionsCount = other.connectionsCount;
  }

  public LinkedInResponse deepCopy() {
    return new LinkedInResponse(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.currentTitle = null;
    this.currentJob = null;
    this.previousTitle = null;
    this.previousJob = null;
    setSkillsCountIsSet(false);
    this.skillsCount = 0;
    setConnectionsCountIsSet(false);
    this.connectionsCount = 0;
  }

  /**
   * The unique identifier for the linkedIn account.
   */
  public String getId() {
    return this.id;
  }

  /**
   * The unique identifier for the linkedIn account.
   */
  public LinkedInResponse setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Current job title of the user.
   */
  public String getCurrentTitle() {
    return this.currentTitle;
  }

  /**
   * Current job title of the user.
   */
  public LinkedInResponse setCurrentTitle(String currentTitle) {
    this.currentTitle = currentTitle;
    return this;
  }

  public void unsetCurrentTitle() {
    this.currentTitle = null;
  }

  /** Returns true if field currentTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentTitle() {
    return this.currentTitle != null;
  }

  public void setCurrentTitleIsSet(boolean value) {
    if (!value) {
      this.currentTitle = null;
    }
  }

  /**
   * Current company the user works for.
   */
  public String getCurrentJob() {
    return this.currentJob;
  }

  /**
   * Current company the user works for.
   */
  public LinkedInResponse setCurrentJob(String currentJob) {
    this.currentJob = currentJob;
    return this;
  }

  public void unsetCurrentJob() {
    this.currentJob = null;
  }

  /** Returns true if field currentJob is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentJob() {
    return this.currentJob != null;
  }

  public void setCurrentJobIsSet(boolean value) {
    if (!value) {
      this.currentJob = null;
    }
  }

  /**
   * Previous job title of the user.
   */
  public String getPreviousTitle() {
    return this.previousTitle;
  }

  /**
   * Previous job title of the user.
   */
  public LinkedInResponse setPreviousTitle(String previousTitle) {
    this.previousTitle = previousTitle;
    return this;
  }

  public void unsetPreviousTitle() {
    this.previousTitle = null;
  }

  /** Returns true if field previousTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousTitle() {
    return this.previousTitle != null;
  }

  public void setPreviousTitleIsSet(boolean value) {
    if (!value) {
      this.previousTitle = null;
    }
  }

  /**
   * Previous company the user works for.
   */
  public String getPreviousJob() {
    return this.previousJob;
  }

  /**
   * Previous company the user works for.
   */
  public LinkedInResponse setPreviousJob(String previousJob) {
    this.previousJob = previousJob;
    return this;
  }

  public void unsetPreviousJob() {
    this.previousJob = null;
  }

  /** Returns true if field previousJob is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousJob() {
    return this.previousJob != null;
  }

  public void setPreviousJobIsSet(boolean value) {
    if (!value) {
      this.previousJob = null;
    }
  }

  /**
   * Count of number of skills user has.
   */
  public long getSkillsCount() {
    return this.skillsCount;
  }

  /**
   * Count of number of skills user has.
   */
  public LinkedInResponse setSkillsCount(long skillsCount) {
    this.skillsCount = skillsCount;
    setSkillsCountIsSet(true);
    return this;
  }

  public void unsetSkillsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKILLSCOUNT_ISSET_ID);
  }

  /** Returns true if field skillsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSkillsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SKILLSCOUNT_ISSET_ID);
  }

  public void setSkillsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKILLSCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of connections user has.
   */
  public long getConnectionsCount() {
    return this.connectionsCount;
  }

  /**
   * Count of number of connections user has.
   */
  public LinkedInResponse setConnectionsCount(long connectionsCount) {
    this.connectionsCount = connectionsCount;
    setConnectionsCountIsSet(true);
    return this;
  }

  public void unsetConnectionsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONSCOUNT_ISSET_ID);
  }

  /** Returns true if field connectionsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CONNECTIONSCOUNT_ISSET_ID);
  }

  public void setConnectionsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONNECTIONSCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CURRENT_TITLE:
      if (value == null) {
        unsetCurrentTitle();
      } else {
        setCurrentTitle((String)value);
      }
      break;

    case CURRENT_JOB:
      if (value == null) {
        unsetCurrentJob();
      } else {
        setCurrentJob((String)value);
      }
      break;

    case PREVIOUS_TITLE:
      if (value == null) {
        unsetPreviousTitle();
      } else {
        setPreviousTitle((String)value);
      }
      break;

    case PREVIOUS_JOB:
      if (value == null) {
        unsetPreviousJob();
      } else {
        setPreviousJob((String)value);
      }
      break;

    case SKILLS_COUNT:
      if (value == null) {
        unsetSkillsCount();
      } else {
        setSkillsCount((Long)value);
      }
      break;

    case CONNECTIONS_COUNT:
      if (value == null) {
        unsetConnectionsCount();
      } else {
        setConnectionsCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CURRENT_TITLE:
      return getCurrentTitle();

    case CURRENT_JOB:
      return getCurrentJob();

    case PREVIOUS_TITLE:
      return getPreviousTitle();

    case PREVIOUS_JOB:
      return getPreviousJob();

    case SKILLS_COUNT:
      return Long.valueOf(getSkillsCount());

    case CONNECTIONS_COUNT:
      return Long.valueOf(getConnectionsCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CURRENT_TITLE:
      return isSetCurrentTitle();
    case CURRENT_JOB:
      return isSetCurrentJob();
    case PREVIOUS_TITLE:
      return isSetPreviousTitle();
    case PREVIOUS_JOB:
      return isSetPreviousJob();
    case SKILLS_COUNT:
      return isSetSkillsCount();
    case CONNECTIONS_COUNT:
      return isSetConnectionsCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LinkedInResponse)
      return this.equals((LinkedInResponse)that);
    return false;
  }

  public boolean equals(LinkedInResponse that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_currentTitle = true && this.isSetCurrentTitle();
    boolean that_present_currentTitle = true && that.isSetCurrentTitle();
    if (this_present_currentTitle || that_present_currentTitle) {
      if (!(this_present_currentTitle && that_present_currentTitle))
        return false;
      if (!this.currentTitle.equals(that.currentTitle))
        return false;
    }

    boolean this_present_currentJob = true && this.isSetCurrentJob();
    boolean that_present_currentJob = true && that.isSetCurrentJob();
    if (this_present_currentJob || that_present_currentJob) {
      if (!(this_present_currentJob && that_present_currentJob))
        return false;
      if (!this.currentJob.equals(that.currentJob))
        return false;
    }

    boolean this_present_previousTitle = true && this.isSetPreviousTitle();
    boolean that_present_previousTitle = true && that.isSetPreviousTitle();
    if (this_present_previousTitle || that_present_previousTitle) {
      if (!(this_present_previousTitle && that_present_previousTitle))
        return false;
      if (!this.previousTitle.equals(that.previousTitle))
        return false;
    }

    boolean this_present_previousJob = true && this.isSetPreviousJob();
    boolean that_present_previousJob = true && that.isSetPreviousJob();
    if (this_present_previousJob || that_present_previousJob) {
      if (!(this_present_previousJob && that_present_previousJob))
        return false;
      if (!this.previousJob.equals(that.previousJob))
        return false;
    }

    boolean this_present_skillsCount = true && this.isSetSkillsCount();
    boolean that_present_skillsCount = true && that.isSetSkillsCount();
    if (this_present_skillsCount || that_present_skillsCount) {
      if (!(this_present_skillsCount && that_present_skillsCount))
        return false;
      if (this.skillsCount != that.skillsCount)
        return false;
    }

    boolean this_present_connectionsCount = true && this.isSetConnectionsCount();
    boolean that_present_connectionsCount = true && that.isSetConnectionsCount();
    if (this_present_connectionsCount || that_present_connectionsCount) {
      if (!(this_present_connectionsCount && that_present_connectionsCount))
        return false;
      if (this.connectionsCount != that.connectionsCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_currentTitle = true && (isSetCurrentTitle());
    list.add(present_currentTitle);
    if (present_currentTitle)
      list.add(currentTitle);

    boolean present_currentJob = true && (isSetCurrentJob());
    list.add(present_currentJob);
    if (present_currentJob)
      list.add(currentJob);

    boolean present_previousTitle = true && (isSetPreviousTitle());
    list.add(present_previousTitle);
    if (present_previousTitle)
      list.add(previousTitle);

    boolean present_previousJob = true && (isSetPreviousJob());
    list.add(present_previousJob);
    if (present_previousJob)
      list.add(previousJob);

    boolean present_skillsCount = true && (isSetSkillsCount());
    list.add(present_skillsCount);
    if (present_skillsCount)
      list.add(skillsCount);

    boolean present_connectionsCount = true && (isSetConnectionsCount());
    list.add(present_connectionsCount);
    if (present_connectionsCount)
      list.add(connectionsCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(LinkedInResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentTitle()).compareTo(other.isSetCurrentTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentTitle, other.currentTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentJob()).compareTo(other.isSetCurrentJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentJob, other.currentJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviousTitle()).compareTo(other.isSetPreviousTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousTitle, other.previousTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviousJob()).compareTo(other.isSetPreviousJob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousJob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousJob, other.previousJob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkillsCount()).compareTo(other.isSetSkillsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkillsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skillsCount, other.skillsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionsCount()).compareTo(other.isSetConnectionsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionsCount, other.connectionsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("socialite.objects.LinkedInResponse(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetCurrentTitle()) {
      if (!first) sb.append(", ");
      sb.append("currentTitle:");
      if (this.currentTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.currentTitle);
      }
      first = false;
    }
    if (isSetCurrentJob()) {
      if (!first) sb.append(", ");
      sb.append("currentJob:");
      if (this.currentJob == null) {
        sb.append("null");
      } else {
        sb.append(this.currentJob);
      }
      first = false;
    }
    if (isSetPreviousTitle()) {
      if (!first) sb.append(", ");
      sb.append("previousTitle:");
      if (this.previousTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.previousTitle);
      }
      first = false;
    }
    if (isSetPreviousJob()) {
      if (!first) sb.append(", ");
      sb.append("previousJob:");
      if (this.previousJob == null) {
        sb.append("null");
      } else {
        sb.append(this.previousJob);
      }
      first = false;
    }
    if (isSetSkillsCount()) {
      if (!first) sb.append(", ");
      sb.append("skillsCount:");
      sb.append(this.skillsCount);
      first = false;
    }
    if (isSetConnectionsCount()) {
      if (!first) sb.append(", ");
      sb.append("connectionsCount:");
      sb.append(this.connectionsCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LinkedInResponseStandardSchemeFactory implements SchemeFactory {
    public LinkedInResponseStandardScheme getScheme() {
      return new LinkedInResponseStandardScheme();
    }
  }

  private static class LinkedInResponseStandardScheme extends StandardScheme<LinkedInResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LinkedInResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENT_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentTitle = iprot.readString();
              struct.setCurrentTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentJob = iprot.readString();
              struct.setCurrentJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREVIOUS_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.previousTitle = iprot.readString();
              struct.setPreviousTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PREVIOUS_JOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.previousJob = iprot.readString();
              struct.setPreviousJobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SKILLS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.skillsCount = iprot.readI64();
              struct.setSkillsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONNECTIONS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.connectionsCount = iprot.readI64();
              struct.setConnectionsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LinkedInResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.currentTitle != null) {
        if (struct.isSetCurrentTitle()) {
          oprot.writeFieldBegin(CURRENT_TITLE_FIELD_DESC);
          oprot.writeString(struct.currentTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentJob != null) {
        if (struct.isSetCurrentJob()) {
          oprot.writeFieldBegin(CURRENT_JOB_FIELD_DESC);
          oprot.writeString(struct.currentJob);
          oprot.writeFieldEnd();
        }
      }
      if (struct.previousTitle != null) {
        if (struct.isSetPreviousTitle()) {
          oprot.writeFieldBegin(PREVIOUS_TITLE_FIELD_DESC);
          oprot.writeString(struct.previousTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.previousJob != null) {
        if (struct.isSetPreviousJob()) {
          oprot.writeFieldBegin(PREVIOUS_JOB_FIELD_DESC);
          oprot.writeString(struct.previousJob);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSkillsCount()) {
        oprot.writeFieldBegin(SKILLS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.skillsCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConnectionsCount()) {
        oprot.writeFieldBegin(CONNECTIONS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.connectionsCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LinkedInResponseTupleSchemeFactory implements SchemeFactory {
    public LinkedInResponseTupleScheme getScheme() {
      return new LinkedInResponseTupleScheme();
    }
  }

  private static class LinkedInResponseTupleScheme extends TupleScheme<LinkedInResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LinkedInResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetCurrentTitle()) {
        optionals.set(0);
      }
      if (struct.isSetCurrentJob()) {
        optionals.set(1);
      }
      if (struct.isSetPreviousTitle()) {
        optionals.set(2);
      }
      if (struct.isSetPreviousJob()) {
        optionals.set(3);
      }
      if (struct.isSetSkillsCount()) {
        optionals.set(4);
      }
      if (struct.isSetConnectionsCount()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCurrentTitle()) {
        oprot.writeString(struct.currentTitle);
      }
      if (struct.isSetCurrentJob()) {
        oprot.writeString(struct.currentJob);
      }
      if (struct.isSetPreviousTitle()) {
        oprot.writeString(struct.previousTitle);
      }
      if (struct.isSetPreviousJob()) {
        oprot.writeString(struct.previousJob);
      }
      if (struct.isSetSkillsCount()) {
        oprot.writeI64(struct.skillsCount);
      }
      if (struct.isSetConnectionsCount()) {
        oprot.writeI64(struct.connectionsCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LinkedInResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.currentTitle = iprot.readString();
        struct.setCurrentTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currentJob = iprot.readString();
        struct.setCurrentJobIsSet(true);
      }
      if (incoming.get(2)) {
        struct.previousTitle = iprot.readString();
        struct.setPreviousTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.previousJob = iprot.readString();
        struct.setPreviousJobIsSet(true);
      }
      if (incoming.get(4)) {
        struct.skillsCount = iprot.readI64();
        struct.setSkillsCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.connectionsCount = iprot.readI64();
        struct.setConnectionsCountIsSet(true);
      }
    }
  }

}

