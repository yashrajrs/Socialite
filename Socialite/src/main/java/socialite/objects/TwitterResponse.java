package socialite.objects; /**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Structure representing basic user Twitter account information.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-10")
public class TwitterResponse implements org.apache.thrift.TBase<TwitterResponse, TwitterResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TwitterResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("socialite.objects.TwitterResponse");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TWEETS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetsCount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LIKES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("likesCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RE_TWEET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("reTweetCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FAVORITES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("favoritesCount", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TwitterResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TwitterResponseTupleSchemeFactory());
  }

  private String id; // required
  private long tweetsCount; // optional
  private long likesCount; // optional
  private long reTweetCount; // optional
  private long favoritesCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The unique identifier for the twitter account.
     */
    ID((short)1, "id"),
    /**
     * Count of number of tweets made by the user.
     */
    TWEETS_COUNT((short)2, "tweetsCount"),
    /**
     * Count of number of tweets likes by the user.
     */
    LIKES_COUNT((short)3, "likesCount"),
    /**
     * Count of number of re-tweets made by the user.
     */
    RE_TWEET_COUNT((short)4, "reTweetCount"),
    /**
     * Count of number of favorites made by the user.
     */
    FAVORITES_COUNT((short)5, "favoritesCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TWEETS_COUNT
          return TWEETS_COUNT;
        case 3: // LIKES_COUNT
          return LIKES_COUNT;
        case 4: // RE_TWEET_COUNT
          return RE_TWEET_COUNT;
        case 5: // FAVORITES_COUNT
          return FAVORITES_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TWEETSCOUNT_ISSET_ID = 0;
  private static final int __LIKESCOUNT_ISSET_ID = 1;
  private static final int __RETWEETCOUNT_ISSET_ID = 2;
  private static final int __FAVORITESCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TWEETS_COUNT,_Fields.LIKES_COUNT,_Fields.RE_TWEET_COUNT,_Fields.FAVORITES_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TWEETS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("tweetsCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIKES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("likesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RE_TWEET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("reTweetCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAVORITES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("favoritesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TwitterResponse.class, metaDataMap);
  }

  public TwitterResponse() {
  }

  public TwitterResponse(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TwitterResponse(TwitterResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.tweetsCount = other.tweetsCount;
    this.likesCount = other.likesCount;
    this.reTweetCount = other.reTweetCount;
    this.favoritesCount = other.favoritesCount;
  }

  public TwitterResponse deepCopy() {
    return new TwitterResponse(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setTweetsCountIsSet(false);
    this.tweetsCount = 0;
    setLikesCountIsSet(false);
    this.likesCount = 0;
    setReTweetCountIsSet(false);
    this.reTweetCount = 0;
    setFavoritesCountIsSet(false);
    this.favoritesCount = 0;
  }

  /**
   * The unique identifier for the twitter account.
   */
  public String getId() {
    return this.id;
  }

  /**
   * The unique identifier for the twitter account.
   */
  public TwitterResponse setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Count of number of tweets made by the user.
   */
  public long getTweetsCount() {
    return this.tweetsCount;
  }

  /**
   * Count of number of tweets made by the user.
   */
  public TwitterResponse setTweetsCount(long tweetsCount) {
    this.tweetsCount = tweetsCount;
    setTweetsCountIsSet(true);
    return this;
  }

  public void unsetTweetsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TWEETSCOUNT_ISSET_ID);
  }

  /** Returns true if field tweetsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTweetsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TWEETSCOUNT_ISSET_ID);
  }

  public void setTweetsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TWEETSCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of tweets likes by the user.
   */
  public long getLikesCount() {
    return this.likesCount;
  }

  /**
   * Count of number of tweets likes by the user.
   */
  public TwitterResponse setLikesCount(long likesCount) {
    this.likesCount = likesCount;
    setLikesCountIsSet(true);
    return this;
  }

  public void unsetLikesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKESCOUNT_ISSET_ID);
  }

  /** Returns true if field likesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLikesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKESCOUNT_ISSET_ID);
  }

  public void setLikesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKESCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of re-tweets made by the user.
   */
  public long getReTweetCount() {
    return this.reTweetCount;
  }

  /**
   * Count of number of re-tweets made by the user.
   */
  public TwitterResponse setReTweetCount(long reTweetCount) {
    this.reTweetCount = reTweetCount;
    setReTweetCountIsSet(true);
    return this;
  }

  public void unsetReTweetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETWEETCOUNT_ISSET_ID);
  }

  /** Returns true if field reTweetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetReTweetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __RETWEETCOUNT_ISSET_ID);
  }

  public void setReTweetCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETWEETCOUNT_ISSET_ID, value);
  }

  /**
   * Count of number of favorites made by the user.
   */
  public long getFavoritesCount() {
    return this.favoritesCount;
  }

  /**
   * Count of number of favorites made by the user.
   */
  public TwitterResponse setFavoritesCount(long favoritesCount) {
    this.favoritesCount = favoritesCount;
    setFavoritesCountIsSet(true);
    return this;
  }

  public void unsetFavoritesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAVORITESCOUNT_ISSET_ID);
  }

  /** Returns true if field favoritesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFavoritesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FAVORITESCOUNT_ISSET_ID);
  }

  public void setFavoritesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAVORITESCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TWEETS_COUNT:
      if (value == null) {
        unsetTweetsCount();
      } else {
        setTweetsCount((Long)value);
      }
      break;

    case LIKES_COUNT:
      if (value == null) {
        unsetLikesCount();
      } else {
        setLikesCount((Long)value);
      }
      break;

    case RE_TWEET_COUNT:
      if (value == null) {
        unsetReTweetCount();
      } else {
        setReTweetCount((Long)value);
      }
      break;

    case FAVORITES_COUNT:
      if (value == null) {
        unsetFavoritesCount();
      } else {
        setFavoritesCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TWEETS_COUNT:
      return Long.valueOf(getTweetsCount());

    case LIKES_COUNT:
      return Long.valueOf(getLikesCount());

    case RE_TWEET_COUNT:
      return Long.valueOf(getReTweetCount());

    case FAVORITES_COUNT:
      return Long.valueOf(getFavoritesCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TWEETS_COUNT:
      return isSetTweetsCount();
    case LIKES_COUNT:
      return isSetLikesCount();
    case RE_TWEET_COUNT:
      return isSetReTweetCount();
    case FAVORITES_COUNT:
      return isSetFavoritesCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TwitterResponse)
      return this.equals((TwitterResponse)that);
    return false;
  }

  public boolean equals(TwitterResponse that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_tweetsCount = true && this.isSetTweetsCount();
    boolean that_present_tweetsCount = true && that.isSetTweetsCount();
    if (this_present_tweetsCount || that_present_tweetsCount) {
      if (!(this_present_tweetsCount && that_present_tweetsCount))
        return false;
      if (this.tweetsCount != that.tweetsCount)
        return false;
    }

    boolean this_present_likesCount = true && this.isSetLikesCount();
    boolean that_present_likesCount = true && that.isSetLikesCount();
    if (this_present_likesCount || that_present_likesCount) {
      if (!(this_present_likesCount && that_present_likesCount))
        return false;
      if (this.likesCount != that.likesCount)
        return false;
    }

    boolean this_present_reTweetCount = true && this.isSetReTweetCount();
    boolean that_present_reTweetCount = true && that.isSetReTweetCount();
    if (this_present_reTweetCount || that_present_reTweetCount) {
      if (!(this_present_reTweetCount && that_present_reTweetCount))
        return false;
      if (this.reTweetCount != that.reTweetCount)
        return false;
    }

    boolean this_present_favoritesCount = true && this.isSetFavoritesCount();
    boolean that_present_favoritesCount = true && that.isSetFavoritesCount();
    if (this_present_favoritesCount || that_present_favoritesCount) {
      if (!(this_present_favoritesCount && that_present_favoritesCount))
        return false;
      if (this.favoritesCount != that.favoritesCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_tweetsCount = true && (isSetTweetsCount());
    list.add(present_tweetsCount);
    if (present_tweetsCount)
      list.add(tweetsCount);

    boolean present_likesCount = true && (isSetLikesCount());
    list.add(present_likesCount);
    if (present_likesCount)
      list.add(likesCount);

    boolean present_reTweetCount = true && (isSetReTweetCount());
    list.add(present_reTweetCount);
    if (present_reTweetCount)
      list.add(reTweetCount);

    boolean present_favoritesCount = true && (isSetFavoritesCount());
    list.add(present_favoritesCount);
    if (present_favoritesCount)
      list.add(favoritesCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(TwitterResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTweetsCount()).compareTo(other.isSetTweetsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTweetsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetsCount, other.tweetsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikesCount()).compareTo(other.isSetLikesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likesCount, other.likesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReTweetCount()).compareTo(other.isSetReTweetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReTweetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reTweetCount, other.reTweetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavoritesCount()).compareTo(other.isSetFavoritesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavoritesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favoritesCount, other.favoritesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("socialite.objects.TwitterResponse(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetTweetsCount()) {
      if (!first) sb.append(", ");
      sb.append("tweetsCount:");
      sb.append(this.tweetsCount);
      first = false;
    }
    if (isSetLikesCount()) {
      if (!first) sb.append(", ");
      sb.append("likesCount:");
      sb.append(this.likesCount);
      first = false;
    }
    if (isSetReTweetCount()) {
      if (!first) sb.append(", ");
      sb.append("reTweetCount:");
      sb.append(this.reTweetCount);
      first = false;
    }
    if (isSetFavoritesCount()) {
      if (!first) sb.append(", ");
      sb.append("favoritesCount:");
      sb.append(this.favoritesCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TwitterResponseStandardSchemeFactory implements SchemeFactory {
    public TwitterResponseStandardScheme getScheme() {
      return new TwitterResponseStandardScheme();
    }
  }

  private static class TwitterResponseStandardScheme extends StandardScheme<TwitterResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TwitterResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TWEETS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tweetsCount = iprot.readI64();
              struct.setTweetsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIKES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.likesCount = iprot.readI64();
              struct.setLikesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RE_TWEET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reTweetCount = iprot.readI64();
              struct.setReTweetCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FAVORITES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.favoritesCount = iprot.readI64();
              struct.setFavoritesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TwitterResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTweetsCount()) {
        oprot.writeFieldBegin(TWEETS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.tweetsCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLikesCount()) {
        oprot.writeFieldBegin(LIKES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.likesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReTweetCount()) {
        oprot.writeFieldBegin(RE_TWEET_COUNT_FIELD_DESC);
        oprot.writeI64(struct.reTweetCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFavoritesCount()) {
        oprot.writeFieldBegin(FAVORITES_COUNT_FIELD_DESC);
        oprot.writeI64(struct.favoritesCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TwitterResponseTupleSchemeFactory implements SchemeFactory {
    public TwitterResponseTupleScheme getScheme() {
      return new TwitterResponseTupleScheme();
    }
  }

  private static class TwitterResponseTupleScheme extends TupleScheme<TwitterResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TwitterResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetTweetsCount()) {
        optionals.set(0);
      }
      if (struct.isSetLikesCount()) {
        optionals.set(1);
      }
      if (struct.isSetReTweetCount()) {
        optionals.set(2);
      }
      if (struct.isSetFavoritesCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTweetsCount()) {
        oprot.writeI64(struct.tweetsCount);
      }
      if (struct.isSetLikesCount()) {
        oprot.writeI64(struct.likesCount);
      }
      if (struct.isSetReTweetCount()) {
        oprot.writeI64(struct.reTweetCount);
      }
      if (struct.isSetFavoritesCount()) {
        oprot.writeI64(struct.favoritesCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TwitterResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tweetsCount = iprot.readI64();
        struct.setTweetsCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.likesCount = iprot.readI64();
        struct.setLikesCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reTweetCount = iprot.readI64();
        struct.setReTweetCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.favoritesCount = iprot.readI64();
        struct.setFavoritesCountIsSet(true);
      }
    }
  }

}

